I"Q<h2 id="结合业务设计api">结合业务设计api</h2>

<h3 id="代码示例版本">代码示例版本</h3>

<p>代码地址：https://github.com/james-xuande/spring-standard-code.git</p>

<p>springboot : 2.2.6.RELEASE</p>

<p>springcloud: Hoxton.SR9</p>

<p>swagger: 2.9.2</p>

<h3 id="需求描述">需求描述</h3>

<p>用户需求： 用户根据订单号查询订单信息。service-a调用service-b 下单或者，service-A  根据订单号  调用 service-B 接口 返回订单详情</p>

<p>机器环境： 4C8G</p>

<p>模拟业务场景,需考虑在保证应用正常支撑的前提下，gc正常，尽量不发生full gc或者jvm溢出：</p>

<ul>
  <li>
    <p>每秒创建: 300单</p>
  </li>
  <li>
    <p>假定每个订单对象大小：1kb（300x1=300kb）</p>
  </li>
</ul>

<h3 id="设计图">设计图</h3>

<p><img src="C:\Users\Administrator\Documents\james-xuande.github.io\assets\images\design-api-sequence.png.jpg" alt="" /></p>

<p>订单查询（通过nexus共享api jar，swagger-api编写文档字段校验，提升开发效率）：</p>

<h4 id="高性能">高性能</h4>

<p>FEIGN要考虑到性能问题，这里qps：300，从serviceB jmeter压力测试，feign 调用svc-a默认线程池只有10，如果超出线程会怎么办，查询报错了。</p>

<p>​	<img src="C:\Users\Administrator\Documents\james-xuande.github.io\assets\images\feign-runningpool.png.jpg" alt="" /></p>

<p>优化线程池：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#并发执行的最大线程数，默认10
hystrix.threadpool.default.coreSize=200
#BlockingQueue的最大队列数，默认值-1
hystrix.threadpool.default.maxQueueSize=1000
#即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝，默认值5
hystrix.threadpool.default.queueSizeRejectionThreshold=800
</code></pre></div></div>

<h4 id="高可用">高可用</h4>

<p>下游service-a有可能内存溢出，这时候feign请求需要重试：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ribbon请求连接的超时时间
ribbon.ConnectTimeout=250
#请求处理的超时时间
ribbon.ReadTimeout=1000
ribbon.eager-load.enable=true
#对当前实例的重试次数
ribbon.MaxAutoRetries=0
#对下个实例的重试次数
ribbon.MaxAutoRetriesNextServer=1
ribbon.retryableStatusCodes=500,502,504
#对所有操作请求都进行重试
ribbon.OkToRetryOnAllOperations=true
</code></pre></div></div>

<h4 id="功能单一">功能单一</h4>

<p><img src="C:\Users\Administrator\Documents\james-xuande.github.io\assets\images\swagger-restful-api.png" alt="" /></p>

<p>对应java实现，dto分层，feign客户端可以复用。</p>

<p><img src="C:\Users\Administrator\Documents\james-xuande.github.io\assets\images\feign-dto.png" alt="" /></p>

<p>这里通过nexus跨模块继承引用api-common的interface，提升大家api交互研发效率。</p>

<p><img src="C:\Users\Administrator\Documents\james-xuande.github.io\assets\images\import-nexus.png" alt="" /></p>

<h3 id="设计原则">设计原则：</h3>

<ul>
  <li>高可用：下游系统处理失败500，是否重试，重试几次，交互异常是否捕获</li>
  <li>高性能：上游系统feign 线程池是否优化，这里根据业务 调整为200，否则线程池熔断也会溢出</li>
  <li>功能单一性： restful 资源/操作，查询、新增，合理的接口命名，明确接口支持的协议： get、post方法</li>
  <li>可读性：</li>
  <li>幂等：新增订单接口，如果订单存在，不新增</li>
  <li>研发效率： nexus dto复用，swagger根据注解对于入参、返回参数 ，自动生成接口文档。接口入参、出参，日志打印</li>
</ul>

<p>参考文章：</p>

<p>Feign Retry 重试：https://www.liujiajia.me/2019/1/22/feign-retry</p>

:ET